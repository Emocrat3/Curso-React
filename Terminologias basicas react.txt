Para crear clases en react se usa className.
Pecurialidad componentes, no deja meter 2 etiquetas, pero se puede solucionar
ingresando un <React.Fragment> o metiendo las etiquetas en un div.

El map() se utiliza para recorrer un array y sacar los datos.
La key={} se utiliza para que identifique los elementos en caso de actualizarlo
y sea dinamico.

los comentarios en JSX se hacen con {/* MENU */}
El state son esas propiedades que se van a mostrar en la vista y actualizar 
dinamicamente.
En el State se puede guardar objetos, coleccion de objetos, numeros, etc:
Se puede definir solo asi 

    state = {
        contador: 0
    };

Fuera del render

Formas alternativas para declarar metodos en las clases del componente.

Con una funcion de flecha, para quitar el .bind(this) del onClick
<input type="button" value="Sumar" onClick={this.sumar}

Ejemplo antes: 
Para usar bind 

    sumar(e){

        this.setState({
            contador: (this.state.contador + 1)
        });
    }

Para no usarlo 
    sumar= (e) => {

        this.setState({
            contador: (this.state.contador + 1)
        });
    }


Props se le puede pasar cualquier propiedad al componente llamado en la clase padre
y en el componente hijo, se puede imprimir asi {this.props.nombreDelProps}
Es un input. 
Tambien se pueden pasar datos del componente hijo al padre. 

Importancia de pasar la Key como atributo a una etiqueta cuando se hace un bucle.

el component willmount, se puede montar algo y el component didmount es cuando ya esta arriba, y se pueden colocar 
fuera del state, seteandoselo en la funcion setState y declarando el state vacio. 

Libreria de rutas npm install --save react-router-dom 

Para crear las rutas, se crea un archivo en el src, se hace como un componente normal, pero se importa 
import { BrowserRouter, Route, Switch} from 'react-router-dom';

Luego se usan dentro del return el BrowserRouter y dentro el Switch que ahi van todas las rutas a usar.
Se crea una etiqueta Route y dentro se coloca el path con el nombre de la ruta y luego se importa el 
componente que se van a mostrar, y se llama con la etiqueta component={EjemploRuta}.
Luego en el app.js se importa el Router con import Router from './Router'; y luego se llama donde se 
mostrara cuando este en la ruta indicada. 

<Route exact path="/" component={PRUEBA} /> se coloca el exact para que todo lo que vaya despues de la / 
funcione y muestre el componente debido.
Si no le coloco el exact, todo lo que comience con / cargara el primer componente y lo que se necesita 
es que cargue la ruta exacta indicada.