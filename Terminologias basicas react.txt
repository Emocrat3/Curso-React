Para crear clases en react se usa className.
Pecurialidad componentes, no deja meter 2 etiquetas, pero se puede solucionar
ingresando un <React.Fragment> o metiendo las etiquetas en un div.

El map() se utiliza para recorrer un array y sacar los datos.
La key={} se utiliza para que identifique los elementos en caso de actualizarlo
y sea dinamico.

los comentarios en JSX se hacen con {/* MENU */}
El state son esas propiedades que se van a mostrar en la vista y actualizar 
dinamicamente.
En el State se puede guardar objetos, coleccion de objetos, numeros, etc:
Se puede definir solo asi 

    state = {
        contador: 0
    };

Fuera del render

Formas alternativas para declarar metodos en las clases del componente.

Con una funcion de flecha, para quitar el .bind(this) del onClick
<input type="button" value="Sumar" onClick={this.sumar}

Ejemplo antes: 
Para usar bind 

    sumar(e){

        this.setState({
            contador: (this.state.contador + 1)
        });
    }

Para no usarlo 
    sumar= (e) => {

        this.setState({
            contador: (this.state.contador + 1)
        });
    }


Props se le puede pasar cualquier propiedad al componente llamado en la clase padre
y en el componente hijo, se puede imprimir asi {this.props.nombreDelProps}
Es un input. 
Tambien se pueden pasar datos del componente hijo al padre. 

Importancia de pasar la Key como atributo a una etiqueta cuando se hace un bucle.

el component willmount, se puede montar algo y el component didmount es cuando ya esta arriba, y se pueden colocar 
fuera del state, seteandoselo en la funcion setState y declarando el state vacio. 

Libreria de rutas npm install --save react-router-dom 

Para crear las rutas, se crea un archivo en el src, se hace como un componente normal, pero se importa 
import { BrowserRouter, Route, Switch} from 'react-router-dom';

Luego se usan dentro del return el BrowserRouter y dentro el Switch que ahi van todas las rutas a usar.
Se crea una etiqueta Route y dentro se coloca el path con el nombre de la ruta y luego se importa el 
componente que se van a mostrar, y se llama con la etiqueta component={EjemploRuta}.
Luego en el app.js se importa el Router con import Router from './Router'; y luego se llama donde se 
mostrara cuando este en la ruta indicada. 

<Route exact path="/" component={PRUEBA} /> se coloca el exact para que todo lo que vaya despues de la / 
funcione y muestre el componente debido.
Si no le coloco el exact, todo lo que comience con / cargara el primer componente y lo que se necesita 
es que cargue la ruta exacta indicada.

Para la ruta error, se coloca al final asi <Route component = {Error} /> y el componente se importa solo con
import React from 'react'; al crearse.. Luego se muestra todo.

Una ruta puede no usar un componente y puede usar render con un callback y puede colocar cualquier cosa en JSX,
props etc. Esto tiene mas flexibilidad y eso se mostrara en la ruta.

Para en una ruta hacer mas funciones de JavaScript y poder coger los parametros de la URL se hace asi

<Route exact path="/pruebas/:nombre/:apellidos?" render={(props) => {
                        var nombre = props.match.params.nombre;
                        var apellidos = props.match.params.apellidos;
                        return (
                            <div id="content">
                                <h1 className="subheader">Página de pruebas</h1>
                                <h2>
                                    Si existe uno solo, lo muestra

                                    {nombre && !apellidos &&
                                        <React.Fragment>{nombre}</React.Fragment>
                                    }

                                    Si existen los dos, los muestra

                                    {nombre && apellidos &&
                                        <React.Fragment>{nombre} {apellidos}</React.Fragment>
                                    }

                                </h2>
                            </div>
                        );
                    }
                    } />
Y lo que pase por el url se imprimira en esa ruta.

Para que dirija a rutas los botones del menu, usamos import { NavLink } from 'react-router-dom'; y se sustituye 
<NavLink to="/">Inicio</NavLink> asi llevara  a la primera ruta definida que es la home.

Para que eso funcione nos tenemos que llevar las importaciones del app.js al Router, porque tiene que estar dentro
del BrowserRouter.

Para que el slider se adapte dependiendo en que componente este, hay que enviar una props con size que indica si es
small o big y en su componente le agrego <div id="slider" className={this.props.size}>

Y en el sidebar para que muestre puedes hacer esto, que es crear el articulo hay que estar dentro de blog, ya que tiene
un if this.props.blog == "true" && que si le llega esa props en true, muestre el codigo.

Para recoger datos del formulario, se usa el ref, el cual se implementa asi ejemploRef = React.createRef(); 
y luego se le pasa por el input asi <input type="text" name="ejemplo"  ref={this.ejemploRef} />

y en vez de usar for en el label, se usa htmlFor ejemplo:<label htmlFor="Ejemplo">Ejemplo</label>

Para ver si se esta guardando todo, se puede hacer un console log al ref, ejemplo console.log(this.ejemploRef.current.value);

El onChange es para ver de forma reactiva los cambios que se hacen. ejemplo en el formulario que toma 
  <form className="mid-form" onSubmit={this.recibirFormulario} onChange={this.recibirFormulario}> 
  y va mostrando cada cosa que se va escribiendo.

  Para hacer peticiones AJAX se usa npm install --save axios y se importa en el componente a usar 
  con import axios from 'axios';

  la libreria de fecha hay que descargar la libreria npm install --save react-moment y tambien el moment para que funcione
El link se utiliza asi  <Link to={'/blog/crear'} className="btn btn-success">Crear artículo</Link> para al dar click redireccione
a esta ruta que esta creada en mis rutas.